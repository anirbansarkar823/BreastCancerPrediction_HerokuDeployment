# -*- coding: utf-8 -*-
"""Breast Cancer Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15ans2yZvWxAUdoNIjKJ9X2J-nK96RG8R

# Based on the tutorial provided by Satyajit Pattnaik
### Breast Cancer Prediction | Implementing PCA & LDA | Machine Learning Project
[Refer tutotial here](https://www.youtube.com/watch?v=AL9-apISbPc&list=PLymcv5WXEpKjnWi7PMp2nul74TVXJ8q3E&index=4)
"""

# importing libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.metrics import accuracy_score

# getting the data
dataset_url = "https://raw.githubusercontent.com/apogiatzis/breast-cancer-azure-ml-notebook/master/breast-cancer-data.csv"
dataset = pd.read_csv(dataset_url)

dataset.head()

dataset['diagnosis'].unique()

# converting y-variable to 1,0
dataset['diagnosis'] = dataset['diagnosis'].map({'M':1, 'B':0})
#1-malignant: cancerous
#0-benign: non-cancerous

dataset.diagnosis.value_counts()

# randomly selecting few features
x=dataset.iloc[:,list(range(2,21))]
y=dataset.diagnosis.values

print(x.head())
print(x.shape)

# feature scaling (standardization) : z = (x - u) / s
# Standardize features by removing the mean and scaling to unit variance
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x = pd.DataFrame(sc.fit_transform(x))

x.head()

# splitting into train test split
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)

"""#### Without using PCA/LDA"""

# training using Logistic Regression Model
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0, solver='liblinear', n_jobs=-1)
classifier.fit(x_train, y_train)

# predicting data
y_pred = classifier.predict(x_test)
type(y_pred)

# Confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True) # annot = True, write the data value in each cell

# printing the accuracy
print(f"Accuracy: {accuracy_score(y_test, y_pred)*100:{2}.{5}}")

"""#### Implementing PCA"""

# splitting into train test split
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)

type(x_train)
type(y_train)
print(x_train.shape)

from sklearn.decomposition import PCA
pca = PCA(n_components = 5) # reducing components to 5
# pca = PCA(0.9) - 90% variance
x_train = pd.DataFrame(pca.fit_transform(x_train))
x_test = pd.DataFrame(pca.transform(x_test))

x_train.head()

print(pca.explained_variance_ratio_)
# pc1 > pc2 > pc3 > pc4 > pc5

# training logistic regression model
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0, solver='liblinear')
classifier.fit(x_train, y_train)

#predicting
y_pred = classifier.predict(x_test)

# visualizing using confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

sns.heatmap(cm, annot=True)

print(f"Accuracy: {accuracy_score(y_pred, y_test)*100:{2}.{5}}")

"""#### Implementing LDA"""

# splitting into train test split
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)
x_train.shape

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
lda = LinearDiscriminantAnalysis(n_components=5)
x_train = pd.DataFrame(lda.fit_transform(x_train, y_train)) #lda requires both x,y
x_test = pd.DataFrame(lda.transform(x_test))

x_test.head()

x_train.head()

lda.explained_variance_ratio_

# training a logistic regression model
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0, solver='liblinear')
classifier.fit(x_train, y_train)

# predicting
y_pred = classifier.predict(x_test)

# confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

# visualization
sns.heatmap(cm, annot=True)

print(f"Accuracy: {accuracy_score(y_test, y_pred)*100:{2}.{5}}")

# highest accuracy came using lda